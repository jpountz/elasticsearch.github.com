---
layout: guide
title: Search API - Sort
cat: guide
sidebar: reference_api_search
---

p. Allows to add one or more sort on specific fields. Each sort can be reversed as well. The sort is defined on a per field level, with special field name for @_score@ to sort by score.

<pre class="prettyprint lang-js">
{
    "sort" : [
        { "post_date" : {"order" : "asc"} },
        "user",
        { "name" : "desc" },
        { "age" : "desc" },
        "_score"
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

p. If the JSON parser support ordering without an array, the sort request can also be structured as follows:

<pre class="prettyprint lang-js">
{
    "sort" : {
        { "post_date" : {"order" : "asc"} },
        "user" : { },
        "_score" : { }
    },
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h1. Sort Values

p. The sort values for each document returned are also returned as part of the response.

h1. Sort mode option

p. From version @0.90.0.Beta1@ Elasticsearch supports sorting by array fields which is also known as multi-valued fields. The @mode@ option controls what array value is picked for sorting the document it belongs to. The @mode@ option can have the following values:
* @min@ - Pick the lowest value.
* @max@ - Pick the highest value.
* @sum@ - Use the sum of all values as sort value. Only applicable for number based array fields.
* @avg@ - Use the average of all values as sort value. Only applicable for number based array fields.

h3. Score mode example usage

p. In the example below the field price has multiple prices per document. In this case the result hits will be sort by price ascending based on the average price per document.

<pre class="prettyprint lang-js">
curl -XPOST 'localhost:9200/_search' -d '{
   "query" : {
    ...
   },
   "sort" : [
      {"price" : {"order" : "asc", "mode" : "avg"}}
   ]
}'
</pre>

h1. Sorting within nested objects.

p. Also from version @0.90.0.Beta1@ Elasticsearch supports sorting by fields that are inside one or more nested objects. The sorting by nested field support has the following parameters on top of the already existing sort options:
* @nested_path@- Defines the on what nested object to sort. The actual sort field must be a direct field inside this nested object. The default is to use the most immediate inherited nested object from the sort field.
* @nested_filter@ - A filter the inner objects inside the nested path should match with in order for its field values to be taken into account by sorting. Common case is to repeat the query / filter inside the nested filter or query. By default no @nested_filter@ is active.

h3. Nested sorting example

p. In the below example @offer@ is a field of type @nested@. Because @offer@ is the closest inherited nested field, it is picked as @nested_path@. Only the inner objects that have color blue will participate in sorting.

<pre class="prettyprint lang-js">
curl -XPOST 'localhost:9200/_search' -d '{
   "query" : {
    ...
   },
   "sort" : [
       {
          "offer.price" : {
             "mode" :  "avg",
             "order" : "asc",
             "nested_filter" : {
                "term" : { "offer.color" : "blue" }
             }
          }
       }
    ]
}'
</pre>

p. Since version @0.90.1@ nested sorting is also support when sorting by scripts and sorting by geo distance.

h1. Missing Values

p. A specific handling can be configured for missing fields in a doc. The @missing@ value can be @_last@, @_first@, or a custom value (that will be used for missing docs as the sort value). For example:

<pre class="prettyprint lang-js">
{
    "sort" : [
        { "price" : {"missing" : "_last"} },
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

p. Note: from version @0.90.1@ if a nested inner object doesn't match with the @nested_filter@ then a missing value is used.

h1. Ignoring Unmapped Fields

p. By default, the search request will fail if there is no mapping associated with a field. The @ignore_unmapped@ option allows to ignore fields that have no mapping and not sort by them. Here is an example of how it can be used:

<pre class="prettyprint lang-js">
{
    "sort" : [
        { "price" : {"ignore_unmapped" : true} },
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>


h1. Geo Distance Sorting

p. Allow to sort by @_geo_distance@. Here is an example:

<pre class="prettyprint lang-js">
{
    "sort" : [
        {
            "_geo_distance" : {
                "pin.location" : [-70, 40],
                "order" : "asc",
                "unit" : "km"
            }
        }
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

p. Note: the geo distance sorting supports @sort_mode@ options: @min@, @max@ and @avg@.

p. The following formats are supported in providing the coordinates:

h2. Lat Lon as Properties

<pre class="prettyprint lang-js">
{
    "sort" : [
        {
            "_geo_distance" : {
                "pin.location" : {
                    "lat" : 40,
                    "lon" : -70
                },
                "order" : "asc",
                "unit" : "km"
            }
        }
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h2. Lat Lon as String

p. Format in @lat,lon@.

<pre class="prettyprint lang-js">
{
    "sort" : [
        {
            "_geo_distance" : {
                "pin.location" : "-70,40",
                "order" : "asc",
                "unit" : "km"
            }
        }
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h2. Geohash

<pre class="prettyprint lang-js">
{
    "sort" : [
        {
            "_geo_distance" : {
                "pin.location" : "drm3btev3e86",
                "order" : "asc",
                "unit" : "km"
            }
        }
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h2. Lat Lon as Array

p. Format in @[lon, lat]@, note, the order of lon/lat here in order to conform with "GeoJSON":http://geojson.org/.

<pre class="prettyprint lang-js">
{
    "sort" : [
        {
            "_geo_distance" : {
                "pin.location" : [-70, 40],
                "order" : "asc",
                "unit" : "km"
            }
        }
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>


h1. Script Based Sorting

p. Allow to sort based on custom scripts, here is an example:

<pre class="prettyprint lang-js">
{
    "query" : {
        ....
    },
    "sort" : {
        "_script" : {
            "script" : "doc['field_name'].value * factor",
            "type" : "number",
            "params" : {
                "factor" : 1.1
            },
            "order" : "asc"
        }
    }
}
</pre>

p. Note, it is recommended, for single custom based script based sorting, to use @custom_score@ query instead as sorting based on score is faster.

h1. Track Scores

p. When sorting on a field, scores are not computed. By setting @track_scores@ to true, scores will still be computed and tracked.

<pre class="prettyprint lang-js">
{
    "track_scores": true,
    "sort" : [
        { "post_date" : {"reverse" : true} },
        { "name" : "desc" },
        { "age" : "desc" }
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>


h1. Memory Considerations

p. When sorting, the relevant sorted field values are loaded into memory. This means that per shard, there should be enough memory to contain them. For string based types, the field sorted on should not be analyzed / tokenized. For numeric types, if possible, it is recommended to explicitly set the type to six_hun types (like @short@, @integer@ and @float@).

